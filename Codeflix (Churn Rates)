# Four months into launching Codeflix, management asks you to look into subscription churn rates. Itâ€™s early on in the business and people are excited to know how the company is doing.

# The marketing department is particularly interested in how the churn compares between two segments of users. They provide you with a dataset containing subscription data for users who were acquired through two distinct channels.

# The dataset provided to you contains one SQL table, subscriptions. Within the table, there are 4 columns:
  -id - the subscription id
  -subscription_start - the start date of the subscription
  -subscription_end - the end date of the subscription
  -segment - this identifies which segment the subscription owner belongs to

# Codeflix requires a minimum subscription length of 31 days, so a user can never start and end their subscription in the same month.

# Below is my solution to calculate subscription churn rates.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

WITH months AS (
  -- The minimum date in the subscriptions table is 2016-12-01 and the max is 2017-03-30, we start by creating temporary date tables from 2017-01-01 to 2017-03-31 as the possible subscription cancelation dates
  SELECT
          '2017-01-01' as first_day
        , '2017-01-31' as last_day
  UNION
  SELECT
          '2017-02-01' as first_day
        , '2017-02-28' as last_day
  UNION
  SELECT 
          '2017-03-01' as first_day
        , '2017-03-31' as last_day

), cross_join as (
  -- We cross join all possible subscription start and end dates to our months table creating a comprehensive list of all possible pairs of subscription dates and months.
  SELECT *
  FROM subscriptions
  CROSS JOIN months

), status as (
  -- Assigning 1's and 0's to segments 87 and 30 to indicate active or canceled status
  SELECT 
          id
        , first_day as month
        , CASE  
                WHEN segment = 87 
                                  AND subscription_start < first_day
                                  AND (subscription_end > first_day
                                  OR subscription_end is null)
                THEN 1
                ELSE 0
          
          END AS is_active_87
        
        , CASE  
                WHEN segment = 30 
                                  AND subscription_start < first_day
                                  AND (subscription_end > first_day
                                  OR subscription_end is null)
                THEN 1
                ELSE 0
         
          END AS is_active_30
    
        , CASE  
                WHEN segment = 87 
                                  AND subscription_end BETWEEN first_day and last_day 
                THEN 1
                ELSE 0
          END AS is_canceled_87
        
        , CASE  
                WHEN segment = 30 
                                  AND subscription_end BETWEEN first_day and last_day 
                THEN 1
                ELSE 0
         
          END AS is_canceled_30
  
  FROM cross_join 

), status_aggregate as (
  -- Aggregating the number of active and canceled subscriptions for segments 87 and 30
  SELECT 
          month
        , SUM(is_active_87) as sum_active_87
        , SUM(is_active_30) as sum_active_30
        , SUM(is_canceled_87) as sum_canceled_87
        , SUM(is_canceled_30) as sum_canceled_30

  FROM status
  GROUP BY 1
  ORDER BY 1

), churn_calc as (
  -- Calculating the churn rates for segments 87 and 30 as sum of canceled subscriptions divided by sum of active subscriptions
  SELECT
          *
        , ROUND(100.0 * sum_canceled_87 / sum_active_87) as churn87
        , ROUND(100.0 * sum_canceled_30 / sum_active_30) as churn30

  FROM status_aggregate
)

SELECT *
FROM churn_calc
LIMIT 100;
